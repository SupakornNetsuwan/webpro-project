import jwt from "jsonwebtoken";
import { User } from "@prisma/client";
import getUser from "../user/getUser";
import { createAccessToken, createRefreshToken } from "./createJWT"
import updateUserRefreshToken from "../user/updateUserRefreshToken"
import getUserRefreshToken from "../user/getUserRefreshToken";
import getErrorMessage from "../getErrorMessage";
/**
 * @description  ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Refresh token ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤ Refresh token ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Refresh token ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Redis
    ‡∏´‡∏≤‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞ Refresh token ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Refresh token ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô Redis
    ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ

    @return ‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô jwt_token ‡πÅ‡∏•‡∏∞ new_refresh_token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
 */

const refreshToken = async (refresh_token: string): Promise<{ jwt_token: string, new_refresh_token: string }> => {
    let jwt_token = "";
    let new_refresh_token = "";

    try {
        // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ Refresh Token
        const decoded = jwt.verify(refresh_token.split(" ")[1], process.env.REFRESHTOKEN_PRIVATEKEY as string)
        const { email } = decoded as User

        // ‡πÑ‡∏õ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô DB
        const user = await getUser(email, { getRefreshToken: true });

        if (user == null) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

        // IMPORTANT : Check if refresh token is valid
        const storedRefreshToken = await getUserRefreshToken(email)

        if (refresh_token != storedRefreshToken) {
            console.log("Refresh token isn't the same in DB üî¥ ‡πÄ‡∏ß‡∏•‡∏≤ :", new Date().toLocaleTimeString("th"));
            throw new Error("Refresh token ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡πÉ‡∏ô Database")
        }

        jwt_token = createAccessToken(user) // create token from newUser data
        new_refresh_token = createRefreshToken(user) // create refresh token from newUser data
        await updateUserRefreshToken(email, new_refresh_token)
    } catch (err) {
        if(getErrorMessage(err) === "jwt expired"){
            console.log("Refresh token is expired üî¥ ‡πÄ‡∏ß‡∏•‡∏≤ :", new Date().toLocaleTimeString("th"));
            throw new Error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏")
        }
    }

    return { jwt_token, new_refresh_token }
}

export default refreshToken