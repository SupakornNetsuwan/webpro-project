import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";
import getErrorMessage from "../../functions/getErrorMessage";
import refreshToken from "../../functions/jwt/refreshToken";
import jwt_decode from "jwt-decode"

/**
 * 
 * @description ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡πÉ‡∏ô header ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    ‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô route ‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ

    ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Refresh Token ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Function ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
 */
const checkJWTMiddleware = (req: Request, res: Response, next: NextFunction) => {
    const { jwt_token, refresh_token }: { jwt_token: string, refresh_token: string } = req.cookies


    if (!jwt_token) return res.status(401).send("No token provided.")

    jwt.verify(jwt_token.split(" ")[1], process.env.JWT_PRIVATEKEY as string, async (err, decoded) => {
        const message = getErrorMessage(err);

        // It's ok üü¢
        if (message === "null") {
            console.log("Access token is valid üü¢", "‡πÄ‡∏ß‡∏•‡∏≤ :", new Date().toLocaleTimeString("th"));
            res.locals.userDetails = decoded;
            return next();
        }

        // Something wrong üî¥
        if (message === "jwt expired") {
            // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡πá‡∏•‡∏≠‡∏á‡∏ó‡∏≥ Refresh ‡∏î‡∏π
            try {
                const newTokens = await refreshToken(refresh_token);
                const { jwt_token, new_refresh_token } = newTokens;

                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Access Token , Refresh Token ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
                res.cookie('refresh_token', new_refresh_token, { httpOnly: false, secure: false });
                res.cookie('jwt_token', jwt_token, { httpOnly: false, secure: false });
                
                // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô res.locals.userDetails
                const decoded = jwt_decode(jwt_token.split(" ")[1]);
                res.locals.userDetails = decoded;

                console.log("Refreshed a token üêï", "‡πÄ‡∏ß‡∏•‡∏≤ :", new Date().toLocaleTimeString("th"))
                return next();
            } catch (err) {
                // ‡∏ñ‡πâ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Refresh Token ‡πÑ‡∏î‡πâ‡∏Å‡πá‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ invalid refresh_token
                const message = getErrorMessage(err);
                console.log(message, "Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Refresh token ‡πÑ‡∏î‡πâ üò≠");
                return res.status(401).send(message)
            }
        }
        
        // Unknown error üî¥
        return res.status(500).send(message)
    })
}

export default checkJWTMiddleware;